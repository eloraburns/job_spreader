h1. Job spreader

h2. Problem statement

You have a job dispatcher which generates groups of jobs, which are all put in a single queue.  You want to run jobs in parallel, as they'll be handled by concurrent workers, but jobs within a group contend for some shared resource.  Hence, you'd like to try spreading them around.  You could shuffle the whole lot, but then you'd need some undetermined number of jobs to shuffle.  You could take the whole batch, but that's silly because the first jobs could be processing while you're busy producing later ones.  It would also be nice if jobs in a group executed somewhat together, since there are caching benefits to executing those jobs together.

h2. The theory

Let's say we have 10 workers.  Because some jobs are faster than others, we'd like to spread out the jobs so that each group's jobs occur every 12 jobs (with 11 other-group jobs in between).  What we can do is lazily bin-pack the incoming groups of jobs into "feeder" queues.  So the first 12 groups of jobs go into 12 feeder queues.  The spreader then takes one job from each queue in turn.  As each feeder runs out of jobs, it takes the next group and continues to produce.  When there are no more groups, that feeder becomes inactive, and we keep taking jobs from the remaining feeders.  Once all the feeders are exhausted, we're done!

For cases where each group is much smaller than the total number of jobs and the number of groups is much smaller than the number of feeders, we are basically guaranteed to have our desired spread between jobs for most of the spread.  At the tail end we might have some larger groups which get less spread out.  If you can arrange to have your smaller groups at the end, this shouldn't present any problems.

h2. The code

The situation this came up in involved PHP, but I'm much happier in Python.  The first implementation was in Python (written on my Android phone (in the Android Scripting Environment) which has Python but not PHP), and I've managed to create a not-quite-so-horrible version for PHP.  If you can improve on the PHP (or Python!) code, I'd be interested to see it!

I've shown the progression of code from first-implementation to I've-thought-about-this-too-much.  There's an urban story ("StackOverflow doesn't know if it's a myth":http://stackoverflow.com/questions/2898571/basis-for-claim-that-the-number-of-bugs-per-line-of-code-is-constant-regardless-o) that the number of defects per LoC is constant regardless of language.  Even if that's not the case, it's hard to argue that "spreader3_documented.php":/taavi/jobspreader/blob/master/spreader3_documented.php (&cong;39LoC, plus helpers) is less likely to have bugs than "spreader4_documented.php":/taavi/jobspreader/blob/master/spreader4_documented.php (&cong;9LoC).  Once you understand what "spreader4_documented.php":/taavi/jobspreader/blob/master/spreader4_documented.php is doing, there's nowhere for bugs to show up.

You can prove for yourself that the code works by running "spreader_driver.php":/taavi/jobspreader/blob/master/spreader_driver.php and "spreader_driver.py":/taavi/jobspreader/blob/master/spreader_driver.py.  Each prints out the list of expected results at the end (used to assert that the code is working correctly) which you can diff to see that the PHP and Python do the same thing in the end.

-- Taavi Burns (firstname at firstnamelastname dot ca)
